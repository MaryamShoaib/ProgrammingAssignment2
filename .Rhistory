count <- table(Gender)
percent <- table(Gender)/725
barplot(percent, main = 'Title', xlab = 'Gender', ylab = '%', las=1, names.arg = c('Female', 'Male'))
barplot(percent, main = 'Title', ylab = 'Gender', xlab = '%', las=1, names.arg = c('Female', 'Male'), horiz = T)
pie(count, main = 'title')
box()
boxplot(LungCapData)
boxplot(LungCap)
quantile(LungCap, probs = c(0,0.25,0.5,0.75,1))
boxplot(LungCap, main = "Boxplot", ylab='Lung Capacity', ylim= c(0,16), las= 1)
boxplot(LungCap ~ Gender)
hist(LungCap, probability = T, ylim = c(0,0.2), breaks = (from=0, to= 16, by= 2), main= 'boxplot of Lung Capacity',las=1)
hist(LungCap, probability = T, ylim = c(0,0.2), breaks = (from=0, to= 16, by= 2), main= 'boxplot of Lung Capacity',las=1)
LungCapData <- read.table(file.choose(), header = T, sep = '\t')
attach(LungCapData)
hist(LungCap, probability = T, ylim = c(0,0.2), breaks = (from=0 to= 16 by= 2), main= 'boxplot of Lung Capacity',las=1)
hist(LungCap, probability = T, ylim = c(0,0.2), breaks = (from=0, to= 16, by= 2), main= 'boxplot of Lung Capacity',las=1)
hist(LungCap, probability = T, ylim = c(0,0.2), breaks = seq(from=0, to=16, by=2), main = 'hist of lung capacity', xlab = 'lung capacity', las=1)
lines(density(LungCap), col= 2, lwd= 3)
femsmoke <- Gender=='female'
stem(femsmoke, scale=2)
femalelung <- LungCap [Gender=='female']
stem(femalelung, scale=2)
stem(femalelung, scale = 4)
stem(femalelung)
Project1 <- read.table("~/Desktop/untitled folder 5/Project1.Rdata", quote="\"")
View(Project1)
View(Project1)
View(Project1)
View(Project1)
View(Project1)
LungCapData <- read.delim("~/Desktop/untitled folder 5/LungCapData.txt")
View(LungCapData)
LungCapData <- read.table(file.choose(), header = T, sep = '\t')
attach(LungCapData)
table1 <- table(Gender, Smoke)
head(table1)
barplot(table1, beside = T, legend.text = c('non-smoker','smoker'), main = 'Gender and smoking', xlab = 'Gender', las=1, col= c(2,4))
barplot(table1, beside = T, legend.text = c('non-smoker','smoker'), ylim= 350, main = 'Gender and smoking', xlab = 'Gender', las=1, col= c(2,4))
barplot(table1, beside = T, legend.text = c('non-smoker','smoker'), main = 'Gender and smoking', xlab = 'Gender', las=1, col= c(2,4))
mosaicplot(table1, beside = T, legend.text = c('non-smoker','smoker'), main = 'Gender and smoking', xlab = 'Gender', las=1, col= c(2,4))
mosaicplot(table1, main = 'Gender and smoking', xlab = 'Gender', las=1, col= c(2,4))
cor(Age, Height)
plot(Age, Height, main = "scatterplot", xlab = 'Age', ylab = 'Height', las=1, xlim= c(0,25), pch= 8, col= 2
plot(Age, Height, main = "scatterplot", xlab = 'Age', ylab = 'Height', las=1, xlim= c(0,25), pch= 8, col= 2))
plot(Age, Height, main = "scatterplot", xlab = 'Age', ylab = 'Height', las=1, xlim= c(0,25), pch= 8, col= 2
plot(Age, Height, main = "scatterplot", xlab = 'Age', ylab = 'Height', las=1, xlim= c(0,25), pch= 8, col= 2)
plot(Age, Height, main = 'Scatterplot',, xlab = 'Age', ylab = 'Height', las=1, xlim = c(0,25), pch=8, col=2)
abline(lm(Height-Age))
abline(lm(Height-Age))
abline(lm(Height-Age), col=4)
abline(lm Height-Age, col=4)
abline(lm(Height-Age), col=4)
View(LungCapData)
attach(LungCapData)
plot(Age, Height, main= 'Scatterplot', cex=0.5, cex.main=2, cex.lab= 1.5, cex.main= 0.7)
plot(Age, Height, main = 'Scatterplot', font.main=4, font.lab=2, font.axis=3)
plot(Age, Height, main = 'Scatterplot', col=5, col.main=4, col.lab=2, col.axis=3)
plot(Age, Hieght, main = "Scatterplot", pch='w')
plot(Age, Height, main = "Scatterplot", pch='w')
abline(lm(Height-Age),col=4, lty=2, lwd=6)
abline(lm (Height-Age),col=4, lty=2, lwd=6)
abline(lm (Height - Age),col=4, lty=2, lwd=6)
abline(lm(Height-Age), col=4, lty=2, lwd=6)
plot(Age[Gender=='male'], Height[Gender=='male'], col=4, pch='m',xlab = 'Age',ylab= 'Height', main = 'Height vs Age')
points(Age[Gender=='female'], Height[Gender=='female'], col=6), pch='f')
plot(Age[Gender=='female'], Height[Gender=='female'], col=6, pch='f')
plot(Age[Gender=='male'], Height[Gender=='male'], col=4, pch='m',xlab = 'Age',ylab= 'Height', main = 'Height vs Age')
point(Age[Gender=='female'], Height[Gender=='female'], col=6, pch='f')
plot(Age[Gender=='male'], Height[Gender=='male'], col=4, pch='m',xlab = 'Age',ylab= 'Height', main = 'Height vs Age')
points(Age[Gender=='female'], Height[Gender=='female'], col=6, pch='f')
## This is a markdown file
## This is a markdown file
install.packages("KernSmooth")
class (x)
x
x = 4L
x
class(x)
x <- c(4, "a", TRUE)
x
class(x)
x <- c(1,3, 5)
x
y <- c(3, 2, 10)
y
rbind(x, y)
x <- list(2, "a", "b", TRUE)
x
class(x)
y = 2
y
class(y)
x <- 1:4
x
y <- 2
y
x + y
x <- c(3, 5, 1, 10, 12, 6)
x
x[x > 6] <- 0
x
x[x != 6] <- 0
x
x[x == 0] <- 6
x
x[x != 6] <- 0
x
x[x %in% 1:5] <- 0
x
x <- 4L
x
class(x)
x <- c(4, TRUE)
x
class(x)
x <- 1:4
x
y <- 2:3
y
x + y
x <- c(1,3, 5)
x
y <- c(3, 2, 10)
y
cbind(x,y)
if (x <- 8) else (x <- 3)
a <- 3
b <- 5
c <-(1:10)
if (a<b)
print ("I like cat")
}
a <- 3
b <- 5
c <-(1:10)
if (a<b){
print ("I like cat")
}
a <- 3
b <- 5
c <-(1:10)
if (a>b){
print ("I like cat")
} else {
}
a <- 3
b <- 5
c <-(1:10)
if (a>b){
print ("I like cat")
} else {
}
a <- 3
b <- 5
c <-(1:10)
if (a>b){
print ("I like cat")
} else {
print ("I like dogs")
}
a <- 3
b <- 5
c <-(1:10)
if (a>b){
print ("I like cat")
} else {
print ("I like dogs")
}
getwd()
setwd("/Users/maryamshoaib/Desktop")
specdata <= '/Users/maryamshoaib/Desktop'
setwd(specdata)
getwd()
setwd("/Users/maryamshoaib/Desktop")
specdata <= '/Users/maryamshoaib/Desktop'
specdata <= '/Users/maryamshoaib/Desktop'
specdata <= "/Users/maryamshoaib/Desktop"
getwd()
getwd()
setwd("/Users/maryamshoaib/Desktop/specdata")
sepcdata <= "/Users/maryamshoaib/Desktop/specdata"
setwd("/Users/maryamshoaib/Desktop/specdata")
specdata <= "/Users/maryamshoaib/Desktop/specdata"
getwd()
setwd("/Users/maryamshoaib/Desktop/")
specdata <= "/Users/maryamshoaib/Desktop/"
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(file.path(getwd(/Users/maryamshoaib/Desktop), directory)) ## setting the directory
total = 0                            ## the sum of all observed values of pollutant (either sulfate or nitrate)
observations = 0                     ## the total number of observed values of pollutant (either sulfate or nitrate)
#Looping thru the directory's files specified in the 'id' argument
for (i in id)
{
## Due to the format of the filename, i.e 001, 010  instead of 1, 10. I became aware that the following method works but not efficient,
## but at the time of the completion of this assignment, it was the only way I knew how to do it.
if (i <10) {
data <- read.csv(paste("0","0", as.character(i), ".csv", sep=""),  ## for example, if 'id' =7, we get 007.csv
header = T,
na.strings=c("NA","NaN", " "))
}
else if (i>=10 & i<100) {
data <- read.csv(paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(paste(as.character(i), ".csv", sep=""),     ## Normal
header = T,
na.strings=c("NA","NaN", " ")
)
}
## getting rid of all the "NA" values and, consequently, all the non-complete ovservations (the ones with at least one NA in row)
data = na.omit(data)
##  cumulative addition of the complete observations
observations = observations + nrow(data)
## depending the poluttant ( sulfate or nitrate), we aggregate the observed values
if (pollutant == "sulfate") {total = total + sum(data$sulfate)}
else {total = total + sum(data$nitrate)}
}
## reset directory path
setwd("..")
## returning the mean of the pollutant values
return (total/observations)
}
# read the R script
# replace the "path/to/file" with the directory you save the file into
# or you can read the file directly from the web
source("path/to/file/assessment3.R")
# create a *square* matrix (because `solve` only handles square matrices)
# create the matrix during the call of makeCacheMatrix()
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) );
summary(a);
#>              Length Class  Mode
#> setMatrix    1      -none- function
#> getMatrix    1      -none- function
#> cacheInverse 1      -none- function
#> getInverse   1      -none- function
a$getMatrix();
#>      [,1] [,2]
#> [1,]    1   12
#> [2,]    2   13
cacheSolve(a)
#> [,1]        [,2]
#> [1,] -1.1818182  1.09090909
#> [2,]  0.1818182 -0.09090909
# the 2nd time we run the function,we get the cached value
cacheSolve(a)
#> getting cached data
#> [,1]        [,2]
#> [1,] -1.1818182  1.09090909
#> [2,]  0.1818182 -0.09090909
# read the R script
# replace the "path/to/file" with the directory you save the file into
# or you can read the file directly from the web
source("/Users/maryamshoaib/Desktop/untitled folder 7")
# create a *square* matrix (because `solve` only handles square matrices)
# create the matrix during the call of makeCacheMatrix()
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) );
summary(a);
#>              Length Class  Mode
#> setMatrix    1      -none- function
#> getMatrix    1      -none- function
#> cacheInverse 1      -none- function
#> getInverse   1      -none- function
a$getMatrix();
#>      [,1] [,2]
#> [1,]    1   12
#> [2,]    2   13
cacheSolve(a)
#> [,1]        [,2]
#> [1,] -1.1818182  1.09090909
#> [2,]  0.1818182 -0.09090909
# the 2nd time we run the function,we get the cached value
cacheSolve(a)
#> getting cached data
#> [,1]        [,2]
#> [1,] -1.1818182  1.09090909
#> [2,]  0.1818182 -0.09090909
# read the R script
# replace the "path/to/file" with the directory you save the file into
# or you can read the file directly from the web
source("/Users/maryamshoaib/Desktop/untitled folder 7")
# create a *square* matrix (because `solve` only handles square matrices)
# create the matrix during the call of makeCacheMatrix()
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) );
summary(a);
#>              Length Class  Mode
#> setMatrix    1      -none- function
#> getMatrix    1      -none- function
#> cacheInverse 1      -none- function
#> getInverse   1      -none- function
a$getMatrix();
#>      [,1] [,2]
#> [1,]    1   12
#> [2,]    2   13
cacheSolve(a)
#> [,1]        [,2]
#> [1,] -1.1818182  1.09090909
#> [2,]  0.1818182 -0.09090909
# the 2nd time we run the function,we get the cached value
cacheSolve(a)
#> getting cached data
#> [,1]        [,2]
#> [1,] -1.1818182  1.09090909
#> [2,]  0.1818182 -0.09090909
b <= matrix(c(1,2,4,5), nrow = 2, ncol = 2)
b
b <= matrix(c(1,2,4,5), nrow = 2, ncol = 2)
b
b <= matrix(c(1,2,4,5), nrow = 2)
b
# read the R script
# replace the "path/to/file" with the directory you save the file into
# or you can read the file directly from the web
source("/Users/maryamshoaib/Desktop/untitled folder 7")
help(matrix)
z <= (c(2,4,6,10), nrow = 2, ncol = 2)
z <= (1:4, nrow = 2, ncol = 2)
z <= (data = c(2,4,5,6), nrow = 2, ncol = 2)
help(makeCacheMatrix)
‘??makeCacheMatrix’
‘makeCacheMatrix’
‘makeCacheMatrix’
matrix(c(2,4,6,7), nrow = 2)
b
b <= c(2,4,6,9)
b
help ("vector")
c <= c(3,5,5,5)
d <= c(3,5,5,5)
x= c(2,4)
x
y= c(3, 5, 7,9)
y
Mat1 <= matrix(y, nrow = 2)
Mat = matrix(y, nrow = 2)
Mat
# create a *square* matrix (because `solve` only handles square matrices)
# create the matrix during the call of makeCacheMatrix()
b = c(1,2,12,13)
b
z = matrix(b, nrow = 2)
z
help(cacheSolve)
# read the R script
# replace the "path/to/file" with the directory you save the file into
# or you can read the file directly from the web
source("path/to/file/assessment3.R")
# create a *square* matrix (because `solve` only handles square matrices)
# create the matrix during the call of makeCacheMatrix()
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) );
summary(a);
#>              Length Class  Mode
#> setMatrix    1      -none- function
#> getMatrix    1      -none- function
#> cacheInverse 1      -none- function
#> getInverse   1      -none- function
a$getMatrix();
#>      [,1] [,2]
#> [1,]    1   12
#> [2,]    2   13
cacheSolve(a)
#> [,1]        [,2]
#> [1,] -1.1818182  1.09090909
#> [2,]  0.1818182 -0.09090909
# the 2nd time we run the function,we get the cached value
cacheSolve(a)
#> getting cached data
#> [,1]        [,2]
#> [1,] -1.1818182  1.09090909
#> [2,]  0.1818182 -0.09090909
# read the R script
# replace the "path/to/file" with the directory you save the file into
# or you can read the file directly from the web
source("/Users/maryamshoaib/Desktop/untitled folder 7")
# create a *square* matrix (because `solve` only handles square matrices)
# create the matrix during the call of makeCacheMatrix()
b = c(1,2,12,13)
b
z = matrix(b, nrow = 2)
z
a <- makeCacheMatrix(z);
summary(a);
#>              Length Class  Mode
#> setMatrix    1      -none- function
#> getMatrix    1      -none- function
#> cacheInverse 1      -none- function
#> getInverse   1      -none- function
a$getMatrix();
#>      [,1] [,2]
#> [1,]    1   12
#> [2,]    2   13
cacheSolve(a)
#> [,1]        [,2]
#> [1,] -1.1818182  1.09090909
#> [2,]  0.1818182 -0.09090909
# the 2nd time we run the function,we get the cached value
cacheSolve(a)
#> getting cached data
#> [,1]        [,2]
#> [1,] -1.1818182  1.09090909
#> [2,]  0.1818182 -0.09090909
# Matrix inversion is usually a costly computation and there may be some benefit
# to caching the inverse of a matrix rather than compute it repeatedly. The
# following two functions are used to cache the inverse of a matrix.
# makeCacheMatrix creates a list containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of inverse of the matrix
# 4. get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
# The following function returns the inverse of the matrix. It first checks if
# the inverse has already been computed. If so, it gets the result and skips the
# computation. If not, it computes the inverse, sets the value in the cache via
# setinverse function.
# This function assumes that the matrix is always invertible.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
## Sample run:
## > x = rbind(c(1, -1/4), c(-1/4, 1))
## > m = makeCacheMatrix(x)
## > m$get()
##       [,1]  [,2]
## [1,]  1.00 -0.25
## [2,] -0.25  1.00
## No cache in the first run
## > cacheSolve(m)
##           [,1]      [,2]
## [1,] 1.0666667 0.2666667
## [2,] 0.2666667 1.0666667
## Retrieving from the cache in the second run
## > cacheSolve(m)
## getting cached data.
##           [,1]      [,2]
## [1,] 1.0666667 0.2666667
## [2,] 0.2666667 1.0666667
## >
# Matrix inversion is usually a costly computation and there may be some benefit
# to caching the inverse of a matrix rather than compute it repeatedly. The
# following two functions are used to cache the inverse of a matrix.
# makeCacheMatrix creates a list containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of inverse of the matrix
# 4. get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
# The following function returns the inverse of the matrix. It first checks if
# the inverse has already been computed. If so, it gets the result and skips the
# computation. If not, it computes the inverse, sets the value in the cache via
# setinverse function.
# This function assumes that the matrix is always invertible.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
## Sample run:
## > x = rbind(c(1, -1/4), c(-1/4, 1))
## > m = makeCacheMatrix(x)
## > m$get()
##       [,1]  [,2]
## [1,]  1.00 -0.25
## [2,] -0.25  1.00
## No cache in the first run
## > cacheSolve(m)
##           [,1]      [,2]
## [1,] 1.0666667 0.2666667
## [2,] 0.2666667 1.0666667
## Retrieving from the cache in the second run
## > cacheSolve(m)
## getting cached data.
##           [,1]      [,2]
## [1,] 1.0666667 0.2666667
## [2,] 0.2666667 1.0666667
## >
